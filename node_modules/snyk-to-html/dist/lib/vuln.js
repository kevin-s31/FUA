"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IacProjectType = exports.addIssueDataToPatch = exports.getUpgrades = exports.getSeverityScore = exports.severityMap = void 0;
const _ = require("@snyk/lodash");
exports.severityMap = { low: 0, medium: 1, high: 2, critical: 3 };
function getVuln(id, vulnerabilities) {
    const vuln = vulnerabilities.find((v) => v.id === id);
    return {
        id: vuln.id,
        title: vuln.title,
        severity: vuln.severity,
    };
}
function getSeverityScore(vulns) {
    return vulns.reduce((acc, vuln) => acc + (exports.severityMap[vuln.severity] + 1), 0);
}
exports.getSeverityScore = getSeverityScore;
function getUpgrades(upgrade, vulnerabilities) {
    const result = [];
    Object.keys(upgrade).forEach((key) => {
        const { upgradeTo, vulns: vulnIds, isTransitive } = upgrade[key];
        const vulns = vulnIds.map((id) => getVuln(id, vulnerabilities));
        const actionableRemediation = {
            upgradeFrom: key,
            upgradeTo,
            vulns,
            severityScore: getSeverityScore(vulns),
        };
        if (isTransitive) {
            actionableRemediation.isTransitive = isTransitive;
        }
        result.push(actionableRemediation);
    });
    const sortedResult = _.orderBy(result, 'severityScore', 'desc');
    return sortedResult;
}
exports.getUpgrades = getUpgrades;
function addIssueDataToPatch(remediation, vulnerabilities) {
    const patches = [];
    Object.entries(remediation).forEach(([pkg, pkgData]) => {
        const vuln = vulnerabilities.find((v) => v.id === pkg);
        const issueData = {
            severity: vuln.severity,
            title: vuln.title,
            id: pkg,
        };
        patches.push({
            issueData,
            paths: pkgData.paths,
            name: vuln.packageName,
            version: vuln.version,
            severityScore: exports.severityMap[vuln.severity],
        });
    });
    const sortedPatches = _.orderBy(patches, 'severityScore', 'desc');
    return sortedPatches;
}
exports.addIssueDataToPatch = addIssueDataToPatch;
exports.IacProjectType = {
    k8sconfig: 'Kubernetes',
    terraformconfig: 'Terraform',
    cloudformationconfig: 'CloudFormation',
    armconfig: 'ARM',
    customconfig: 'Custom',
    multiiacconfig: 'Multi IaC',
};
//# sourceMappingURL=vuln.js.map